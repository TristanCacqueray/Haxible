(
    [ Definition
        { name = "playbook"
        , requires = []
        , provides = []
        , outputs = Environment
            { getEnv = [] }
        , exprs =
            [ Expr
                { binder = Binder "resultsLocalhost0"
                , requires = []
                , provides =
                    [ Resource
                        { name = Binder "stat0"
                        , dep = Register "etc"
                        }
                    , Resource
                        { name = Binder "stat0"
                        , dep = Path "/etc"
                        }
                    ]
                , outputs = Right []
                , requirements = []
                , loop = Nothing
                , term = DefinitionCall
                    ( CallDefinition
                        { name = "playLocalhost0"
                        , playAttrs =
                            [
                                ( "hosts"
                                , String "localhost"
                                )
                            ]
                        , baseEnv = []
                        }
                    )
                }
            , Expr
                { binder = Binder "resultsZuulExecutor0"
                , requires = []
                , provides =
                    [ Resource
                        { name = Binder "file0"
                        , dep = Register "zuuldir"
                        }
                    , Resource
                        { name = Binder "file0"
                        , dep = Path "/tmp/zuul"
                        }
                    ]
                , outputs = Right []
                , requirements = []
                , loop = Nothing
                , term = DefinitionCall
                    ( CallDefinition
                        { name = "playZuulExecutor0"
                        , playAttrs =
                            [
                                ( "hosts"
                                , String "zuul_executor"
                                )
                            ]
                        , baseEnv = []
                        }
                    )
                }
            , Expr
                { binder = Binder "resultsNodepoolLauncher0"
                , requires = []
                , provides =
                    [ Resource
                        { name = Binder "file1"
                        , dep = Path "/tmp/nodepool"
                        }
                    ]
                , outputs = Right []
                , requirements = []
                , loop = Nothing
                , term = DefinitionCall
                    ( CallDefinition
                        { name = "playNodepoolLauncher0"
                        , playAttrs =
                            [
                                ( "hosts"
                                , String "nodepool_launcher"
                                )
                            ]
                        , baseEnv = []
                        }
                    )
                }
            , Expr
                { binder = Binder "resultsLocalhost1"
                , requires =
                    [ Resource
                        { name = Binder "stat0"
                        , dep = Register "etc"
                        }
                    ]
                , provides = []
                , outputs = Right []
                , requirements =
                    [ Requirement
                        { name = "etc"
                        , origin = Nested
                            ( Binder "resultsLocalhost0" ) 0
                        }
                    ]
                , loop = Nothing
                , term = DefinitionCall
                    ( CallDefinition
                        { name = "playLocalhost1"
                        , playAttrs =
                            [
                                ( "hosts"
                                , String "localhost"
                                )
                            ]
                        , baseEnv = []
                        }
                    )
                }
            ]
        }
    , Definition
        { name = "playLocalhost0"
        , requires = []
        , provides =
            [ Resource
                { name = Binder "stat0"
                , dep = Register "etc"
                }
            , Resource
                { name = Binder "stat0"
                , dep = Path "/etc"
                }
            ]
        , outputs = Environment
            { getEnv =
                [
                    ( Binder "stat0"
                    , Right
                        [ Resource
                            { name = Binder "stat0"
                            , dep = Register "etc"
                            }
                        , Resource
                            { name = Binder "stat0"
                            , dep = Path "/etc"
                            }
                        ]
                    )
                ,
                    ( Binder "command0"
                    , Right []
                    )
                ]
            }
        , exprs =
            [ Expr
                { binder = Binder "stat0"
                , requires = []
                , provides =
                    [ Resource
                        { name = Binder "stat0"
                        , dep = Register "etc"
                        }
                    , Resource
                        { name = Binder "stat0"
                        , dep = Path "/etc"
                        }
                    ]
                , outputs = Right
                    [ Resource
                        { name = Binder "stat0"
                        , dep = Register "etc"
                        }
                    , Resource
                        { name = Binder "stat0"
                        , dep = Path "/etc"
                        }
                    ]
                , requirements = []
                , loop = Nothing
                , term = ModuleCall
                    ( CallModule
                        { module_ = "stat"
                        , params = Object
                            ( fromList
                                [
                                    ( "path"
                                    , String "/etc"
                                    )
                                ]
                            )
                        , taskAttrs = []
                        }
                    )
                }
            , Expr
                { binder = Binder "command0"
                , requires =
                    [ Resource
                        { name = Binder "stat0"
                        , dep = Register "etc"
                        }
                    ]
                , provides = []
                , outputs = Right []
                , requirements =
                    [ Requirement
                        { name = "etc"
                        , origin = Direct
                            ( Binder "stat0" )
                        }
                    , Requirement
                        { name = "_etc"
                        , origin = Direct
                            ( Binder "stat0" )
                        }
                    ]
                , loop = Nothing
                , term = ModuleCall
                    ( CallModule
                        { module_ = "command"
                        , params = String "echo etc exist: {{ etc.stat.exists }}"
                        , taskAttrs = []
                        }
                    )
                }
            ]
        }
    , Definition
        { name = "playZuulExecutor0"
        , requires = []
        , provides =
            [ Resource
                { name = Binder "file0"
                , dep = Register "zuuldir"
                }
            , Resource
                { name = Binder "file0"
                , dep = Path "/tmp/zuul"
                }
            ]
        , outputs = Environment
            { getEnv =
                [
                    ( Binder "file0"
                    , Right
                        [ Resource
                            { name = Binder "file0"
                            , dep = Register "zuuldir"
                            }
                        , Resource
                            { name = Binder "file0"
                            , dep = Path "/tmp/zuul"
                            }
                        ]
                    )
                ,
                    ( Binder "command1"
                    , Right []
                    )
                ]
            }
        , exprs =
            [ Expr
                { binder = Binder "file0"
                , requires = []
                , provides =
                    [ Resource
                        { name = Binder "file0"
                        , dep = Register "zuuldir"
                        }
                    , Resource
                        { name = Binder "file0"
                        , dep = Path "/tmp/zuul"
                        }
                    ]
                , outputs = Right
                    [ Resource
                        { name = Binder "file0"
                        , dep = Register "zuuldir"
                        }
                    , Resource
                        { name = Binder "file0"
                        , dep = Path "/tmp/zuul"
                        }
                    ]
                , requirements = []
                , loop = Nothing
                , term = ModuleCall
                    ( CallModule
                        { module_ = "file"
                        , params = Object
                            ( fromList
                                [
                                    ( "path"
                                    , String "/tmp/zuul"
                                    )
                                ,
                                    ( "state"
                                    , String "directory"
                                    )
                                ]
                            )
                        , taskAttrs = []
                        }
                    )
                }
            , Expr
                { binder = Binder "command1"
                , requires =
                    [ Resource
                        { name = Binder "file0"
                        , dep = Path "/tmp/zuul"
                        }
                    ]
                , provides = []
                , outputs = Right []
                , requirements =
                    [ Requirement
                        { name = "zuuldir"
                        , origin = Direct
                            ( Binder "file0" )
                        }
                    , Requirement
                        { name = "_tmp_zuul"
                        , origin = Direct
                            ( Binder "file0" )
                        }
                    ]
                , loop = Nothing
                , term = ModuleCall
                    ( CallModule
                        { module_ = "command"
                        , params = String "echo Starting executor -d /tmp/zuul"
                        , taskAttrs = []
                        }
                    )
                }
            ]
        }
    , Definition
        { name = "playNodepoolLauncher0"
        , requires = []
        , provides =
            [ Resource
                { name = Binder "file1"
                , dep = Path "/tmp/nodepool"
                }
            ]
        , outputs = Environment
            { getEnv =
                [
                    ( Binder "file1"
                    , Right
                        [ Resource
                            { name = Binder "file1"
                            , dep = Path "/tmp/nodepool"
                            }
                        ]
                    )
                ,
                    ( Binder "command2"
                    , Right []
                    )
                ,
                    ( Binder "debug0"
                    , Right []
                    )
                ]
            }
        , exprs =
            [ Expr
                { binder = Binder "file1"
                , requires = []
                , provides =
                    [ Resource
                        { name = Binder "file1"
                        , dep = Path "/tmp/nodepool"
                        }
                    ]
                , outputs = Right
                    [ Resource
                        { name = Binder "file1"
                        , dep = Path "/tmp/nodepool"
                        }
                    ]
                , requirements = []
                , loop = Nothing
                , term = ModuleCall
                    ( CallModule
                        { module_ = "file"
                        , params = Object
                            ( fromList
                                [
                                    ( "path"
                                    , String "/tmp/nodepool"
                                    )
                                ,
                                    ( "state"
                                    , String "directory"
                                    )
                                ]
                            )
                        , taskAttrs = []
                        }
                    )
                }
            , Expr
                { binder = Binder "command2"
                , requires =
                    [ Resource
                        { name = Binder "file1"
                        , dep = Path "/tmp/nodepool"
                        }
                    ]
                , provides = []
                , outputs = Right []
                , requirements =
                    [ Requirement
                        { name = "_tmp_nodepool"
                        , origin = Direct
                            ( Binder "file1" )
                        }
                    ]
                , loop = Nothing
                , term = ModuleCall
                    ( CallModule
                        { module_ = "command"
                        , params = String "echo Starting scheduler -d /tmp/nodepool"
                        , taskAttrs = []
                        }
                    )
                }
            , Expr
                { binder = Binder "debug0"
                , requires = []
                , provides = []
                , outputs = Right []
                , requirements = []
                , loop = Nothing
                , term = ModuleCall
                    ( CallModule
                        { module_ = "debug"
                        , params = Null
                        , taskAttrs = []
                        }
                    )
                }
            ]
        }
    , Definition
        { name = "playLocalhost1"
        , requires =
            [ Resource
                { name = Binder "stat0"
                , dep = Register "etc"
                }
            ]
        , provides = []
        , outputs = Environment
            { getEnv =
                [
                    ( Binder "debug1"
                    , Right []
                    )
                ]
            }
        , exprs =
            [ Expr
                { binder = Binder "debug1"
                , requires =
                    [ Resource
                        { name = Binder "stat0"
                        , dep = Register "etc"
                        }
                    ]
                , provides = []
                , outputs = Right []
                , requirements = []
                , loop = Nothing
                , term = ModuleCall
                    ( CallModule
                        { module_ = "debug"
                        , params = Object
                            ( fromList
                                [
                                    ( "msg"
                                    , String "etc stats is {{ etc }}"
                                    )
                                ]
                            )
                        , taskAttrs = []
                        }
                    )
                }
            ]
        }
    ]
, "-- Generated with haxible
  {-# LANGUAGE QuasiQuotes, ApplicativeDo, OverloadedStrings #-}
  {- cabal:
  build-depends: base, haxible
  ghc-options: -threaded -rtsopts -with-rtsopts=-N -with-rtsopts=-T
  -}
  module Main (main) where

  import Haxible.Eval

  main :: IO ()
  main = runHaxible "inventory.yaml" (playbook [] [])

  playbook :: Vars -> Vars -> AnsibleHaxl [Value]
  playbook playAttrs baseEnv = do
    resultsLocalhost0 <- playLocalhost0 ([("hosts", [json|"localhost"|])] <> playAttrs) ([] <> [] <> baseEnv)
    resultsZuulExecutor0 <- playZuulExecutor0 ([("hosts", [json|"zuul_executor"|])] <> playAttrs) ([] <> [] <> baseEnv)
    resultsNodepoolLauncher0 <- playNodepoolLauncher0 ([("hosts", [json|"nodepool_launcher"|])] <> playAttrs) ([] <> [] <> baseEnv)
    resultsLocalhost1 <- playLocalhost1 ([("hosts", [json|"localhost"|])] <> playAttrs) ([("etc", resultsLocalhost0 !! 0)] <> [] <> baseEnv)
    pure $ resultsLocalhost0 <> resultsZuulExecutor0 <> resultsNodepoolLauncher0 <> resultsLocalhost1

  playLocalhost0 :: Vars -> Vars -> AnsibleHaxl [Value]
  playLocalhost0 playAttrs baseEnv = do
    stat0 <- runTask playAttrs "stat" [json|{"stat":{"path":"/etc"}}|] ([] <> baseEnv)
    command0 <- runTask playAttrs "command" [json|{"command":"echo etc exist: {{ etc.stat.exists }}"}|] ([("etc", stat0), ("_etc", stat0)] <> baseEnv)
    pure $ [stat0] <> [command0]

  playZuulExecutor0 :: Vars -> Vars -> AnsibleHaxl [Value]
  playZuulExecutor0 playAttrs baseEnv = do
    file0 <- runTask playAttrs "file" [json|{"file":{"path":"/tmp/zuul","state":"directory"}}|] ([] <> baseEnv)
    command1 <- runTask playAttrs "command" [json|{"command":"echo Starting executor -d /tmp/zuul"}|] ([("zuuldir", file0), ("_tmp_zuul", file0)] <> baseEnv)
    pure $ [file0] <> [command1]

  playNodepoolLauncher0 :: Vars -> Vars -> AnsibleHaxl [Value]
  playNodepoolLauncher0 playAttrs baseEnv = do
    file1 <- runTask playAttrs "file" [json|{"file":{"path":"/tmp/nodepool","state":"directory"}}|] ([] <> baseEnv)
    command2 <- runTask playAttrs "command" [json|{"command":"echo Starting scheduler -d /tmp/nodepool"}|] ([("_tmp_nodepool", file1)] <> baseEnv)
    debug0 <- runTask playAttrs "debug" [json|{"debug":null}|] ([] <> baseEnv)
    pure $ [file1] <> [command2] <> [debug0]

  playLocalhost1 :: Vars -> Vars -> AnsibleHaxl [Value]
  playLocalhost1 playAttrs baseEnv = do
    debug1 <- runTask playAttrs "debug" [json|{"debug":{"msg":"etc stats is {{ etc }}"}}|] ([] <> baseEnv)
    pure $ [debug1]

  "
)