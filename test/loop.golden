(
    [ Definition
        { name = "playbook"
        , requires = []
        , provides = []
        , outputs = Environment
            { getEnv = [] }
        , exprs =
            [ Expr
                { binder = Binder "resultsLocalhost0"
                , requires = []
                , provides =
                    [ Resource
                        { name = Binder "debugCallTaskInALoop0"
                        , dep = Register "loop_res"
                        }
                    ]
                , outputs = Right []
                , requirements = []
                , loop = Nothing
                , term = DefinitionCall
                    ( CallDefinition
                        { name = "playLocalhost0"
                        , playAttrs =
                            [
                                ( "hosts"
                                , String "localhost"
                                )
                            ]
                        , baseEnv = []
                        }
                    )
                }
            ]
        }
    , Definition
        { name = "playLocalhost0"
        , requires = []
        , provides =
            [ Resource
                { name = Binder "debugCallTaskInALoop0"
                , dep = Register "loop_res"
                }
            ]
        , outputs = Environment
            { getEnv =
                [
                    ( Binder "debugCallTaskInALoop0"
                    , Right
                        [ Resource
                            { name = Binder "debugCallTaskInALoop0"
                            , dep = Register "loop_res"
                            }
                        ]
                    )
                ,
                    ( Binder "debug0"
                    , Right []
                    )
                ]
            }
        , exprs =
            [ Expr
                { binder = Binder "debugCallTaskInALoop0"
                , requires = []
                , provides =
                    [ Resource
                        { name = Binder "debugCallTaskInALoop0"
                        , dep = Register "loop_res"
                        }
                    ]
                , outputs = Right
                    [ Resource
                        { name = Binder "debugCallTaskInALoop0"
                        , dep = Register "loop_res"
                        }
                    ]
                , requirements =
                    [ Requirement
                        { name = "item"
                        , origin = LoopVar
                        }
                    ]
                , loop = Just
                    ( Array
                        [ String "A"
                        , String "B"
                        , String "C"
                        ]
                    )
                , term = ModuleCall
                    ( CallModule
                        { module_ = "debug"
                        , params = Object
                            ( fromList
                                [
                                    ( "msg"
                                    , String "loop {{ item }}"
                                    )
                                ]
                            )
                        , taskAttrs =
                            [
                                ( "name"
                                , String "Call task in a loop"
                                )
                            ]
                        }
                    )
                }
            , Expr
                { binder = Binder "debug0"
                , requires =
                    [ Resource
                        { name = Binder "debugCallTaskInALoop0"
                        , dep = Register "loop_res"
                        }
                    ]
                , provides = []
                , outputs = Right []
                , requirements =
                    [ Requirement
                        { name = "loop_res"
                        , origin = Direct
                            ( Binder "debugCallTaskInALoop0" )
                        }
                    ]
                , loop = Nothing
                , term = ModuleCall
                    ( CallModule
                        { module_ = "debug"
                        , params = Object
                            ( fromList
                                [
                                    ( "msg"
                                    , String "loop result is {{ loop_res }}"
                                    )
                                ]
                            )
                        , taskAttrs = []
                        }
                    )
                }
            ]
        }
    ]
, "-- Generated with haxible
  {-# LANGUAGE QuasiQuotes, ApplicativeDo, OverloadedStrings #-}
  {- cabal:
  build-depends: base, haxible
  ghc-options: -threaded -rtsopts -with-rtsopts=-N -with-rtsopts=-T
  -}
  module Main (main) where

  import Haxible.Eval

  main :: IO ()
  main = runHaxible "inventory.yaml" (playbook [] [])

  playbook :: Vars -> Vars -> AnsibleHaxl [Value]
  playbook playAttrs baseEnv = do
    resultsLocalhost0 <- playLocalhost0 ([("hosts", [json|"localhost"|])] <> playAttrs) ([] <> [] <> baseEnv)
    pure $ resultsLocalhost0

  playLocalhost0 :: Vars -> Vars -> AnsibleHaxl [Value]
  playLocalhost0 playAttrs baseEnv = do
    debugCallTaskInALoop0 <- traverseLoop (\__haxible_loop_item ->  runTask playAttrs "debug" [json|{"debug":{"msg":"loop {{ item }}"},"name":"Call task in a loop"}|] ([("item", __haxible_loop_item)] <> baseEnv) )  [[json|"A"|], [json|"B"|], [json|"C"|]]
    debug0 <- runTask playAttrs "debug" [json|{"debug":{"msg":"loop result is {{ loop_res }}"}}|] ([("loop_res", debugCallTaskInALoop0)] <> baseEnv)
    pure $ [debugCallTaskInALoop0] <> [debug0]

  "
)